diff --git a/src/wl_window.c b/src/wl_window.c
index 2e842aaa..784ad80d 100644
--- a/src/wl_window.c
+++ b/src/wl_window.c
@@ -25,6 +25,8 @@
 //========================================================================
 
 #define _GNU_SOURCE
+#include <xkbcommon/xkbcommon-keysyms.h>
+#include <xkbcommon/xkbcommon.h>
 
 #include "internal.h"
 
@@ -1158,6 +1160,124 @@ static GLFWbool flushDisplay(void)
 
 static int translateKey(uint32_t scancode)
 {
+  xkb_keysym_t sym =
+      xkb_state_key_get_one_sym(_glfw.wl.xkb.state, scancode + 8);
+
+  sym = xkb_keysym_to_lower(sym);
+
+#define XKB_KEY(key) XKB_KEY_##key
+#define GLFW_KEY(key) GLFW_KEY_##key
+#define SNIPPET(a, b)                                                          \
+  case XKB_KEY(a):                                                             \
+    return GLFW_KEY(b);
+#define SNIPPET1(a)                                                            \
+  case XKB_KEY(a):                                                             \
+    return GLFW_KEY(a);
+
+  switch (sym) {
+    SNIPPET(space, SPACE);
+    SNIPPET(apostrophe, APOSTROPHE);
+    SNIPPET(comma, COMMA);
+    SNIPPET(minus, MINUS);
+    SNIPPET(period, PERIOD);
+    SNIPPET(slash, SLASH);
+    SNIPPET1(0);
+    SNIPPET1(1);
+    SNIPPET1(2);
+    SNIPPET1(3);
+    SNIPPET1(4);
+    SNIPPET1(5);
+    SNIPPET1(6);
+    SNIPPET1(7);
+    SNIPPET1(8);
+    SNIPPET1(9);
+    SNIPPET(semicolon, SEMICOLON);
+    SNIPPET(equal, EQUAL);
+    SNIPPET(a, A);
+    SNIPPET(b, B);
+    SNIPPET(c, C);
+    SNIPPET(d, D);
+    SNIPPET(e, E);
+    SNIPPET(f, F);
+    SNIPPET(g, G);
+    SNIPPET(h, H);
+    SNIPPET(i, I);
+    SNIPPET(j, J);
+    SNIPPET(k, K);
+    SNIPPET(l, L);
+    SNIPPET(m, M);
+    SNIPPET(n, N);
+    SNIPPET(o, O);
+    SNIPPET(p, P);
+    SNIPPET(q, Q);
+    SNIPPET(r, R);
+    SNIPPET(s, S);
+    SNIPPET(t, T);
+    SNIPPET(u, U);
+    SNIPPET(v, V);
+    SNIPPET(w, W);
+    SNIPPET(x, X);
+    SNIPPET(y, Y);
+    SNIPPET(z, Z);
+    SNIPPET(bracketleft, LEFT_BRACKET);
+    SNIPPET(backslash, BACKSLASH);
+    SNIPPET(bracketright, RIGHT_BRACKET);
+    SNIPPET(grave, GRAVE_ACCENT);
+
+    SNIPPET(Escape, ESCAPE);
+    SNIPPET(Return, ENTER);
+    SNIPPET(Tab, TAB);
+    SNIPPET(BackSpace, BACKSPACE);
+    SNIPPET(Insert, INSERT);
+    SNIPPET(Delete, DELETE);
+    SNIPPET(Right, RIGHT);
+    SNIPPET(Left, LEFT);
+    SNIPPET(Down, DOWN);
+    SNIPPET(Up, UP);
+    SNIPPET(Page_Up, PAGE_UP);
+    SNIPPET(Page_Down, PAGE_DOWN);
+    SNIPPET(Home, HOME);
+    SNIPPET(End, END);
+    SNIPPET(Caps_Lock, CAPS_LOCK);
+    SNIPPET(Scroll_Lock, SCROLL_LOCK);
+    SNIPPET(Num_Lock, NUM_LOCK);
+    SNIPPET(Print, PRINT_SCREEN);
+    SNIPPET(Pause, PAUSE);
+    SNIPPET1(F1);
+    SNIPPET1(F2);
+    SNIPPET1(F3);
+    SNIPPET1(F4);
+    SNIPPET1(F5);
+    SNIPPET1(F6);
+    SNIPPET1(F7);
+    SNIPPET1(F8);
+    SNIPPET1(F9);
+    SNIPPET1(F10);
+    SNIPPET1(F11);
+    SNIPPET1(F12);
+    SNIPPET1(F13);
+    SNIPPET1(F14);
+    SNIPPET1(F15);
+    SNIPPET1(F16);
+    SNIPPET1(F17);
+    SNIPPET1(F18);
+    SNIPPET1(F19);
+    SNIPPET1(F20);
+    SNIPPET1(F21);
+    SNIPPET1(F22);
+    SNIPPET1(F23);
+    SNIPPET1(F24);
+    SNIPPET1(F25);
+
+  default:
+    break;
+  }
+
+#undef XKB_KEY
+#undef GLFW_KEY
+#undef SNIPPET
+#undef SNIPPET1
+
     if (scancode < sizeof(_glfw.wl.keycodes) / sizeof(_glfw.wl.keycodes[0]))
         return _glfw.wl.keycodes[scancode];
 
@@ -2235,7 +2355,7 @@ void _glfwSetWindowTitleWayland(_GLFWwindow* window, const char* title)
 void _glfwSetWindowIconWayland(_GLFWwindow* window,
                                int count, const GLFWimage* images)
 {
-    _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+    printf("%s\n",
                     "Wayland: The platform does not support setting the window icon");
 }
 
@@ -2244,7 +2364,7 @@ void _glfwGetWindowPosWayland(_GLFWwindow* window, int* xpos, int* ypos)
     // A Wayland client is not aware of its position, so just warn and leave it
     // as (0, 0)
 
-    _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+    printf("%s\n",
                     "Wayland: The platform does not provide the window position");
 }
 
@@ -2252,7 +2372,7 @@ void _glfwSetWindowPosWayland(_GLFWwindow* window, int xpos, int ypos)
 {
     // A Wayland client can not set its position, so just warn
 
-    _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+    printf("%s\n",
                     "Wayland: The platform does not support setting the window position");
 }
 
@@ -2606,7 +2726,7 @@ void _glfwSetWindowDecoratedWayland(_GLFWwindow* window, GLFWbool enabled)
 
 void _glfwSetWindowFloatingWayland(_GLFWwindow* window, GLFWbool enabled)
 {
-    _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+    printf("%s\n",
                     "Wayland: Platform does not support making a window floating");
 }
 
@@ -2629,7 +2749,7 @@ float _glfwGetWindowOpacityWayland(_GLFWwindow* window)
 
 void _glfwSetWindowOpacityWayland(_GLFWwindow* window, float opacity)
 {
-    _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+    printf("%s\n",
                     "Wayland: The platform does not support setting the window opacity");
 }
 
@@ -2675,7 +2795,7 @@ void _glfwGetCursorPosWayland(_GLFWwindow* window, double* xpos, double* ypos)
 
 void _glfwSetCursorPosWayland(_GLFWwindow* window, double x, double y)
 {
-    _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+    printf("%s\n",
                     "Wayland: The platform does not support setting the cursor position");
 }
 
@@ -2927,7 +3047,7 @@ static void lockPointer(_GLFWwindow* window)
 {
     if (!_glfw.wl.relativePointerManager)
     {
-        _glfwInputError(GLFW_FEATURE_UNAVAILABLE,
+        printf("%s\n",
                         "Wayland: The compositor does not support pointer locking");
         return;
     }
